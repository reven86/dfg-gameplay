name: Multi-Platform CMake Build

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Manual trigger

env:
  S3_REGION: ${{ secrets.S3_REGION || 'eu-central-003' }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
  REPO_NAME: ${{ github.event.repository.name }}
  AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: ${{ github.event.repository.name }}

    - name: Checkout code GamePlay
      uses: actions/checkout@v4
      with:
        repository: reven86/GamePlay
        path: GamePlay

    - name: Install dependencies
      run: |
        sudo apt-get install -y \
              libgtk2.0-dev \
              libgtkmm-2.4-dev \
              pkg-config \
              libx11-dev \
              libgl1-mesa-dev \
              libglu1-mesa-dev \
              libxext-dev \
              libxrandr-dev \
              libxinerama-dev \
              libxcursor-dev \
              libxi-dev
        pip3 install awscli

    - name: Download and extract external dependencies from S3
      run: |
        aws s3 cp s3://$S3_BUCKET/builds/external-deps-include.zip . \
          --endpoint-url=$S3_ENDPOINT    
        unzip -o external-deps-include.zip -d GamePlay/external-deps

    - name: Configure CMake
      run: |
        cd $REPO_NAME/client
        cmake -B build-linux \
              -S . \
              -DCMAKE_BUILD_TYPE=Release \
              -G Ninja

    - name: Build project
      run: |
        cd $REPO_NAME/client
        cmake --build build-linux \
              --config Release \
              --parallel $(nproc)

    - name: Package build
      run: |
        cd $REPO_NAME/client
        cd _out
        zip -r ../$REPO_NAME-linux.zip .

    - name: Upload to S3
      run: |
        cd $REPO_NAME/client
        aws s3 cp $REPO_NAME-linux.zip \
          s3://$S3_BUCKET/builds/ --endpoint-url=$S3_ENDPOINT

  build-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        android_abi: [arm64-v8a, armeabi-v7a, x86_64, x86]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: ${{ github.event.repository.name }}

    - name: Checkout code GamePlay
      uses: actions/checkout@v4
      with:
        repository: reven86/GamePlay
        path: GamePlay

    - name: Download and extract external dependencies from S3
      run: |
        aws s3 cp s3://$S3_BUCKET/builds/external-deps-include.zip . \
          --endpoint-url=$S3_ENDPOINT    
        unzip -o external-deps-include.zip -d GamePlay/external-deps

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Configure Android build
      run: |
        cd $REPO_NAME/client
        cmake -B build-android-${{ matrix.android_abi }} \
              -S . \
              -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake \
              -DANDROID_ABI=${{ matrix.android_abi }} \
              -DANDROID_FORCE_ARM_BUILD=ON \
              -DANDROID_PLATFORM=android-24 \
              -DANDROID_STL=c++_static \
              -DCMAKE_BUILD_TYPE=Release

    - name: Build Android
      run: |
        cd $REPO_NAME/client
        cmake --build build-android-${{ matrix.android_abi }} --parallel $(nproc)

    - name: Package Android build
      run: |
        cd $REPO_NAME/client
        cd _out
        zip -r ../$REPO_NAME-android-${{ matrix.android_abi }}.zip .

    - name: Upload to S3
      run: |
        cd $REPO_NAME/client
        aws s3 cp $REPO_NAME-android-${{ matrix.android_abi }}.zip \
          s3://$S3_BUCKET/builds/ --endpoint-url=$S3_ENDPOINT

  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: ${{ github.event.repository.name }}

    - name: Checkout code GamePlay
      uses: actions/checkout@v4
      with:
        repository: reven86/GamePlay
        path: GamePlay

    - name: Install dependencies
      run: |
        brew install awscli

    - name: Download and extract external dependencies from S3
      run: |
        aws s3 cp s3://$S3_BUCKET/builds/external-deps-include.zip . \
          --endpoint-url=$S3_ENDPOINT    
        unzip -o external-deps-include.zip -d GamePlay/external-deps

    - name: Configure iOS build
      run: |
        cd $REPO_NAME/client
        cmake -B build-ios \
              -S . \
              -DPLATFORM=OS \
              -DDEPLOYMENT_TARGET=12.0 \
              -DCMAKE_TOOLCHAIN_FILE=../../GamePlay/cmake/ios.toolchain.cmake \
              -DCMAKE_BUILD_TYPE=Release

    - name: Build iOS
      run: |
        cd $REPO_NAME/client
        cmake --build build-ios --parallel $(sysctl -n hw.ncpu) --target dfg-gameplay

    - name: Package iOS build
      run: |
        cd $REPO_NAME/client
        cd _out
        zip -r ../$REPO_NAME-ios.zip .

    - name: Upload to S3
      run: |
        cd $REPO_NAME/client
        aws s3 cp $REPO_NAME-ios.zip \
          s3://$S3_BUCKET/builds/ --endpoint-url=$S3_ENDPOINT

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: ${{ github.event.repository.name }}

    - name: Checkout code GamePlay
      uses: actions/checkout@v4
      with:
        repository: reven86/GamePlay
        path: GamePlay

    - name: Install dependencies
      run: |
        brew install awscli

    - name: Download and extract external dependencies from S3
      run: |
        aws s3 cp s3://$S3_BUCKET/builds/external-deps-include.zip . \
          --endpoint-url=$S3_ENDPOINT
        unzip -o external-deps-include.zip -d GamePlay/external-deps

    - name: Configure MacOS build
      run: |
        cd $REPO_NAME/client
        cmake -B build-macos \
              -S . \
              -DGP_NO_LUA_BINDINGS=1 \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=10.7 \
              -DCMAKE_OSX_ARCHITECTURES="x86_64" \
              -DCMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk \
              -DCMAKE_BUILD_TYPE=Release

    - name: Build MacOS
      run: |
        cd $REPO_NAME/client
        cmake --build build-macos --parallel $(sysctl -n hw.ncpu) --target dfg-gameplay

    - name: Package MacOS build
      run: |
        cd $REPO_NAME/client
        cd _out
        zip -r ../$REPO_NAME-macos.zip .

    - name: Upload to S3
      run: |
        cd $REPO_NAME/client
        aws s3 cp $REPO_NAME-macos.zip \
          s3://$S3_BUCKET/builds/ --endpoint-url=$S3_ENDPOINT

  build-emscripten:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - emscripten: latest
          gp_no_ui: 1
        - emscripten: 3.1.50
          gp_no_ui: 1
        - emscripten: latest
          gp_no_ui: 0
    
    steps:
    - name: Setup Emscripten
      uses: mymindstorm/setup-emsdk@v14
      with:
       version: ${{ matrix.emscripten }}

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: ${{ github.event.repository.name }}

    - name: Checkout code GamePlay
      uses: actions/checkout@v4
      with:
        repository: reven86/GamePlay
        path: GamePlay

    - name: Download and extract external dependencies from S3
      run: |
        aws s3 cp s3://$S3_BUCKET/builds/external-deps-include.zip . \
          --endpoint-url=$S3_ENDPOINT    
        unzip -o external-deps-include.zip -d GamePlay/external-deps

    - name: Configure Emscripten build
      run: |
        cd $REPO_NAME/client
        emcmake cmake -B build-emscripten \
                      -S . \
                      -DGP_NO_UI=${{ matrix.gp_no_ui }} \
                      -DCMAKE_BUILD_TYPE=MinSizeRel

    - name: Build Emscripten
      run: |
        cd $REPO_NAME/client
        cmake --build build-emscripten --parallel $(nproc)

    - name: Package Emscripten build
      run: |
        cd $REPO_NAME/client
        cd _out
        if [ ${{ matrix.gp_no_ui }} -eq 0 ]; then
          zip -r ../$REPO_NAME-emscripten-${{ matrix.emscripten }}-ui.zip .
        else
          zip -r ../$REPO_NAME-emscripten-${{ matrix.emscripten }}.zip .
        fi

    - name: Upload to S3
      run: |
        cd $REPO_NAME/client
        if [ ${{ matrix.gp_no_ui }} -eq 0 ]; then
          aws s3 cp $REPO_NAME-emscripten-${{ matrix.emscripten }}-ui.zip \
            s3://$S3_BUCKET/builds/ --endpoint-url=$S3_ENDPOINT
        else
          aws s3 cp $REPO_NAME-emscripten-${{ matrix.emscripten }}.zip \
            s3://$S3_BUCKET/builds/ --endpoint-url=$S3_ENDPOINT
        fi

  deploy-summary:
    runs-on: ubuntu-latest
    needs: [build-linux, build-android, build-ios, build-emscripten]
    
    steps:
    - name: Create deployment summary
      run: |
        echo "Build completed for all platforms!" > summary.md
        echo "Commit: ${{ github.sha }}" >> summary.md
        echo "Build artifacts uploaded to S3 bucket: ${{ env.S3_BUCKET }}" >> summary.md

    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: build-summary
        path: summary.md